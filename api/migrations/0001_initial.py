# Generated by Django 3.2.11 on 2022-02-10 23:38

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_ID', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActiveSession',
            fields=[
                ('session_ID', models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Circle',
            fields=[
                ('circle_ID', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('localization', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('expire_date', models.CharField(blank=True, max_length=50, null=True)),
                ('creation_date', models.CharField(blank=True, max_length=50, null=True)),
                ('max_users', models.CharField(blank=True, max_length=50, null=True)),
                ('stats', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('profile_ID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.customuser')),
                ('stats', models.CharField(blank=True, max_length=50, null=True)),
                ('social_link', models.CharField(blank=True, max_length=50, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('contact', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WaitingRoom',
            fields=[
                ('room_ID', models.AutoField(primary_key=True, serialize=False)),
                ('active_sessions_IDs', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.activesession')),
                ('users_that_want_to_join_IDs', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_ID', models.AutoField(primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('A', '1'), ('B', '2'), ('C', '3'), ('D', '4'), ('E', '5'), ('F', '6'), ('G', '7')], default='A', max_length=50)),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('responsible_circle_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.circle')),
                ('reported_user_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_user_ID', to='api.profile')),
                ('reporting_user_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reporting_user_ID', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('message_ID', models.AutoField(primary_key=True, serialize=False)),
                ('send_time', models.CharField(blank=True, max_length=50, null=True)),
                ('attachments_URL', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('content', models.CharField(blank=True, max_length=50, null=True)),
                ('active_session_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.activesession')),
            ],
        ),
        migrations.AddField(
            model_name='circle',
            name='reports_IDs',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.report'),
        ),
        migrations.AddField(
            model_name='activesession',
            name='member1_ID',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='member1', to='api.waitingroom', to_field='users_that_want_to_join_IDs'),
        ),
        migrations.AddField(
            model_name='activesession',
            name='member2_ID',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='member2', to='api.waitingroom', to_field='users_that_want_to_join_IDs'),
        ),
        migrations.AddField(
            model_name='activesession',
            name='messages_IDs',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.message'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user_circles_IDs',
            field=models.ManyToManyField(blank=True, to='api.Circle'),
        ),
        migrations.AddField(
            model_name='message',
            name='reciver_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reciver_ID', to='api.profile'),
        ),
        migrations.AddField(
            model_name='message',
            name='sender_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender_ID', to='api.profile'),
        ),
        migrations.AddField(
            model_name='circle',
            name='admin_users_IDs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_users_IDs', to='api.profile'),
        ),
        migrations.AddField(
            model_name='circle',
            name='users_IDs',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile'),
        ),
    ]
